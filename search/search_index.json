{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RICOH THETA SC2 API Build Android iOS mobile apps for the SC2 and connect your mobile app to the camera with Wi-Fi using this API. Overview The RICOH THETA SC2 is a great, lightweight camera that takes good-looking 360\u00b0 pictures. Many people in the developer community have asked about building applications for the SC2. Although the SC2 camera appears to conform to the RICOH THETA Wi-Fi API, it is not listed on the official RICOH API site which we all use as our reference. Some developers have reported problems with the SC2 and the RICOH THETA SDK for features such as live preview. The SC2 uses a slower MCU than the RICOH THETA V and Z1. The slower speed of the SC2 results in longer processing times for all API commands. This can cause problems if you run multiple API commands in sequence and do not check for completion of each command. There are extensive examples in this document and sample code that show how to use POST /osc/commands/status and POST /osc/state to verify that your previous API command is finished processing. Refer to the section on SC2 API Differences for a short overview of SC2 differences with commands/status when using startCapture . This article organizes usage of the SC2 Wi-Fi API based on community testing. It is not an official RICOH document. Please contact RICOH for official information. HTTP API Testing Tools I am using THETA SC2 firmware 1.64 on a Windows 10 machine. There are many API testing tools you can use. Examples: Postman , JMeter and Insomnia . Another command line alternative is curl . If you prefer to write scripts for your tests, I find it easy and effective to use Python requests or any number of JavaScript libraries that can handle an HTTP request. This article makes extensive use of the Dart http package for both GET and POST requests. Dart was chosen for many tests as it almost as easy to use as Bash or Python for command line scripts and provides a smooth and easy way to test mobile apps on iOS and Android with Flutter . Several of the tests are in the Oppkey THETA API Test Kit (ATK) . Connect Your Computer to the SC2 Turn the SC2 on and put it into Wi-Fi mode. You must connect your workstation to the SC2 with Wi-Fi. The hotspot password is the serial number (just the numerical digits). On Windows, click on the Wi-Fi icon in the lower-right of your screen. Select the THETAYP hotspot. In this example, the password is 20001005. There are no letters or dots in the default password. Once connected, the Wi-Fi icon on the front of the SC2 will be solid. If the Wi-Fi icon is still flashing, the camera is not connected. Troubleshooting Connection The THETA SC2 Wi-Fi only functions at 2.4GHz. The THETA V and the Z1 operate at both 2.4GHz and 5GHz. If you have an unstable Wi-Fi connection with the SC, try a different Wi-Fi dongle or laptop to isolate the problem. If you are working with multiple devices, make sure you are connecting to the correct camera. Put the camera right next to your development workstation. Moving the camera 5 feet away can make a difference. Turn off other Wi-Fi routers in the test area that may be causing Wi-Fi interference. If you have two network interfaces in your development workstation, make sure that your primary router is not at 192.168.1.1. The THETA SC2 will always be 192.168.1.1 in Access Point (AP) mode. Do not use the Windows 10 network PIN. Use the security key. Below the PIN input field, there is a link that says, Connect using a security key instead . Connection Limitations Compared to THETA V and Z1 SC2 only operates at 2.4GHz. The V and Z1 can also connect at 5GHz SC2 can only operate in Access Point (AP) mode. The V and Z1 can also operate in Client Mode (CL) You can use the official RICOH mobile app to check camera features. Compare the available SC2 settings in the image above to the THETA V settings in the image below.","title":"Home"},{"location":"#ricoh-theta-sc2-api","text":"Build Android iOS mobile apps for the SC2 and connect your mobile app to the camera with Wi-Fi using this API.","title":"RICOH THETA SC2 API"},{"location":"#overview","text":"The RICOH THETA SC2 is a great, lightweight camera that takes good-looking 360\u00b0 pictures. Many people in the developer community have asked about building applications for the SC2. Although the SC2 camera appears to conform to the RICOH THETA Wi-Fi API, it is not listed on the official RICOH API site which we all use as our reference. Some developers have reported problems with the SC2 and the RICOH THETA SDK for features such as live preview. The SC2 uses a slower MCU than the RICOH THETA V and Z1. The slower speed of the SC2 results in longer processing times for all API commands. This can cause problems if you run multiple API commands in sequence and do not check for completion of each command. There are extensive examples in this document and sample code that show how to use POST /osc/commands/status and POST /osc/state to verify that your previous API command is finished processing. Refer to the section on SC2 API Differences for a short overview of SC2 differences with commands/status when using startCapture . This article organizes usage of the SC2 Wi-Fi API based on community testing. It is not an official RICOH document. Please contact RICOH for official information.","title":"Overview"},{"location":"#http-api-testing-tools","text":"I am using THETA SC2 firmware 1.64 on a Windows 10 machine. There are many API testing tools you can use. Examples: Postman , JMeter and Insomnia . Another command line alternative is curl . If you prefer to write scripts for your tests, I find it easy and effective to use Python requests or any number of JavaScript libraries that can handle an HTTP request. This article makes extensive use of the Dart http package for both GET and POST requests. Dart was chosen for many tests as it almost as easy to use as Bash or Python for command line scripts and provides a smooth and easy way to test mobile apps on iOS and Android with Flutter . Several of the tests are in the Oppkey THETA API Test Kit (ATK) .","title":"HTTP API Testing Tools"},{"location":"#connect-your-computer-to-the-sc2","text":"Turn the SC2 on and put it into Wi-Fi mode. You must connect your workstation to the SC2 with Wi-Fi. The hotspot password is the serial number (just the numerical digits). On Windows, click on the Wi-Fi icon in the lower-right of your screen. Select the THETAYP hotspot. In this example, the password is 20001005. There are no letters or dots in the default password. Once connected, the Wi-Fi icon on the front of the SC2 will be solid. If the Wi-Fi icon is still flashing, the camera is not connected.","title":"Connect Your Computer to the SC2"},{"location":"#troubleshooting-connection","text":"The THETA SC2 Wi-Fi only functions at 2.4GHz. The THETA V and the Z1 operate at both 2.4GHz and 5GHz. If you have an unstable Wi-Fi connection with the SC, try a different Wi-Fi dongle or laptop to isolate the problem. If you are working with multiple devices, make sure you are connecting to the correct camera. Put the camera right next to your development workstation. Moving the camera 5 feet away can make a difference. Turn off other Wi-Fi routers in the test area that may be causing Wi-Fi interference. If you have two network interfaces in your development workstation, make sure that your primary router is not at 192.168.1.1. The THETA SC2 will always be 192.168.1.1 in Access Point (AP) mode. Do not use the Windows 10 network PIN. Use the security key. Below the PIN input field, there is a link that says, Connect using a security key instead .","title":"Troubleshooting Connection"},{"location":"#connection-limitations-compared-to-theta-v-and-z1","text":"SC2 only operates at 2.4GHz. The V and Z1 can also connect at 5GHz SC2 can only operate in Access Point (AP) mode. The V and Z1 can also operate in Client Mode (CL) You can use the official RICOH mobile app to check camera features. Compare the available SC2 settings in the image above to the THETA V settings in the image below.","title":"Connection Limitations Compared to THETA V and Z1"},{"location":"basic-commands/","text":"Basic Commands Use standard HTTP requests to communicate with the SC2. Most of the commands are POST requests and require a script or an API testing tool. A few of the commands are GET requests and can be tested with a browser. info Check API Access with \"info\" Use the simplest possible API command first to make sure your workstation can talk to the camera with HTTP. Send a GET command to http://192.168.1.1/osc/info You can also run the GET command in your browser. You will see the response below. This is a test using Google Chrome. Chrome displays colored highlighting in my browser because I am using the free extension JSON Awesome . This is an example using curl on WSL on Windows 10. Request curl http://192.168.1.1/osc/info Response {\"manufacturer\":\"RICOH\",\"model\":\"RICOH THETA SC2\",\"serialNumber\":\"20001005\",\"firmwareVersion\":\"01.64\",\"supportUrl\":\"https://theta360.com/en/support/\",\"gps\":false,\"gyro\":true,\"endpoints\":{\"httpPort\":80,\"httpUpdatesPort\":80},\"apiLevel\":[2],\"api\":[\"/osc/info\",\"/osc/state\",\"/osc/checkForUpdates\",\"/osc/commands/execute\",\"/osc/commands/status\"],\"uptime\":2949,\"_wlanMacAddress\":\"58:38:79:2b:ad:c5\",\"_bluetoothMacAddress\":\"6c:21:a2:47:d9:05\"} The rest of this tutorial will focus on POST commands. You will need to use an API testing tool. state The simplest POST command is state . Make sure that you use POST and not GET. Note that the header should include Content-Type: application/json . You need the HTTP header for most of the THETA SC2 POST commands. It's a good practice to include it. The response is below. You can see that we're able to grab lots of useful info from the state, including the battery level, and the last picture taken _latestFileUrl . My battery is at 66%. I need to charge it. takePicture Finally, we get to the exciting part of our journey. We have a camera. Let's take a picture. It's time. :-) Closeup of endpoint. Closeup of the payload. Celebrate the Camera Chirp The camera will now chirp when the take picture command is run. Developers like the chirp because it's associated with a successful outcome of your program. In the future, you can trigger the picture with object recognition or external sensors. However, for now, take a moment to celebrate the chirp. Response from takePicture Disappointingly, we can't see the picture directly in the takePicture response. We're close, so just hang on for the next step. For now, pay attention to state value that you get in the response. Notice that it says, \"inProgress.\" This is important because you'll next need to check to make sure the camera has finished processing the image before you can download it. View Image During API Testing Repeat the POST example for /osc/state explained earlier in the document. As you've just taken a picture, your response will now show the _latestFileUrl . Use that to grab the file. You can open it in a browser. Pay attention to the _captureStatus value. You need to check the status before you can download the file. In the example below, I am using an API testing tool to get the image. However, you can also test this in a web browser. The file is in equirectangular JPEG format.","title":"Basic Commands"},{"location":"basic-commands/#basic-commands","text":"Use standard HTTP requests to communicate with the SC2. Most of the commands are POST requests and require a script or an API testing tool. A few of the commands are GET requests and can be tested with a browser.","title":"Basic Commands"},{"location":"basic-commands/#info","text":"Check API Access with \"info\" Use the simplest possible API command first to make sure your workstation can talk to the camera with HTTP. Send a GET command to http://192.168.1.1/osc/info You can also run the GET command in your browser. You will see the response below. This is a test using Google Chrome. Chrome displays colored highlighting in my browser because I am using the free extension JSON Awesome . This is an example using curl on WSL on Windows 10. Request curl http://192.168.1.1/osc/info Response {\"manufacturer\":\"RICOH\",\"model\":\"RICOH THETA SC2\",\"serialNumber\":\"20001005\",\"firmwareVersion\":\"01.64\",\"supportUrl\":\"https://theta360.com/en/support/\",\"gps\":false,\"gyro\":true,\"endpoints\":{\"httpPort\":80,\"httpUpdatesPort\":80},\"apiLevel\":[2],\"api\":[\"/osc/info\",\"/osc/state\",\"/osc/checkForUpdates\",\"/osc/commands/execute\",\"/osc/commands/status\"],\"uptime\":2949,\"_wlanMacAddress\":\"58:38:79:2b:ad:c5\",\"_bluetoothMacAddress\":\"6c:21:a2:47:d9:05\"} The rest of this tutorial will focus on POST commands. You will need to use an API testing tool.","title":"info"},{"location":"basic-commands/#state","text":"The simplest POST command is state . Make sure that you use POST and not GET. Note that the header should include Content-Type: application/json . You need the HTTP header for most of the THETA SC2 POST commands. It's a good practice to include it. The response is below. You can see that we're able to grab lots of useful info from the state, including the battery level, and the last picture taken _latestFileUrl . My battery is at 66%. I need to charge it.","title":"state"},{"location":"basic-commands/#takepicture","text":"Finally, we get to the exciting part of our journey. We have a camera. Let's take a picture. It's time. :-) Closeup of endpoint. Closeup of the payload.","title":"takePicture"},{"location":"basic-commands/#celebrate-the-camera-chirp","text":"The camera will now chirp when the take picture command is run. Developers like the chirp because it's associated with a successful outcome of your program. In the future, you can trigger the picture with object recognition or external sensors. However, for now, take a moment to celebrate the chirp.","title":"Celebrate the Camera Chirp"},{"location":"basic-commands/#response-from-takepicture","text":"Disappointingly, we can't see the picture directly in the takePicture response. We're close, so just hang on for the next step. For now, pay attention to state value that you get in the response. Notice that it says, \"inProgress.\" This is important because you'll next need to check to make sure the camera has finished processing the image before you can download it.","title":"Response from takePicture"},{"location":"basic-commands/#view-image-during-api-testing","text":"Repeat the POST example for /osc/state explained earlier in the document. As you've just taken a picture, your response will now show the _latestFileUrl . Use that to grab the file. You can open it in a browser. Pay attention to the _captureStatus value. You need to check the status before you can download the file. In the example below, I am using an API testing tool to get the image. However, you can also test this in a web browser. The file is in equirectangular JPEG format.","title":"View Image During API Testing"},{"location":"camera-status/","text":"Check Camera Status Before Sending Next Command The SC2 appears to take quite a bit longer to be ready for the next picture shoot. The V/Z1 is faster in my experience. When you write your own program you should verify that the camera is ready for the next command with state or status . Although both state and status will work for takePicture in still image mode, you will need to use state if you use more advanced shots that require startCapture . Check camera availability with state The flow of your program will be as follows: <--- camera.takePicture ----> response <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: idle <--- GET URL *URL = _LatestFileUrl of the state received immediately before Check camera availability with status I used a network protocol analyzer log from both the RICOH mobile SDK and the official mobile app to see how these apps check for the readiness of the image to be download. Both apps are using status. Using status, the steps are: takePicture check on status of takePicture using the state property. if status shows state as inProgress, repeat check If the status shows state as done, get the URL of the laste image taken download file and save to disk. To use status, you must get the id of the /osc/command from the HTTP response of takePicture . Once you have the id , you can pass it to status . Put the check on the status in a loop with a delay in the loop to avoid overwhelming the camera and your logs. Here's an example of putting a delay of 1 second into the loop. Checking Status of startCapture Community member timbit123 identified a problem using /osc/commands/status to check the completion of start capture. See his post here .","title":"Camera Status"},{"location":"camera-status/#check-camera-status-before-sending-next-command","text":"The SC2 appears to take quite a bit longer to be ready for the next picture shoot. The V/Z1 is faster in my experience. When you write your own program you should verify that the camera is ready for the next command with state or status . Although both state and status will work for takePicture in still image mode, you will need to use state if you use more advanced shots that require startCapture .","title":"Check Camera Status Before Sending Next Command"},{"location":"camera-status/#check-camera-availability-with-state","text":"The flow of your program will be as follows: <--- camera.takePicture ----> response <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: shooting <--- POST /osc/state ----> response _captureStatus: idle <--- GET URL *URL = _LatestFileUrl of the state received immediately before","title":"Check camera availability with state"},{"location":"camera-status/#check-camera-availability-with-status","text":"I used a network protocol analyzer log from both the RICOH mobile SDK and the official mobile app to see how these apps check for the readiness of the image to be download. Both apps are using status. Using status, the steps are: takePicture check on status of takePicture using the state property. if status shows state as inProgress, repeat check If the status shows state as done, get the URL of the laste image taken download file and save to disk. To use status, you must get the id of the /osc/command from the HTTP response of takePicture . Once you have the id , you can pass it to status . Put the check on the status in a loop with a delay in the loop to avoid overwhelming the camera and your logs. Here's an example of putting a delay of 1 second into the loop.","title":"Check camera availability with status"},{"location":"camera-status/#checking-status-of-startcapture","text":"Community member timbit123 identified a problem using /osc/commands/status to check the completion of start capture. See his post here .","title":"Checking Status of startCapture"},{"location":"differences/","text":"RICOH THETA Development Community Tip Sheet early access outline Last updated: December 6, 2021 This is a community document based on contributions of informal test results from the theta360.guide independent community. This is not an official RICOH document. For official information, please contact RICOH. You should confirm these community tips with your own tests prior to deployment in a business setting. As these are unofficial tips, the official RICOH THETA API may change unexpectedly and these techniques could stop working. Limited Functionality on SC2 and SC2B Limited API Explanation commands/status Only works with SC2 for takePicture. Cannot be used with startCapture. To see when the interval or bracket shooting is finished when using startCapture, use osc/state and look for _captureState of the SC2 camera.startCapture SC2 does not support interval composite shooting. Additionally, only the SC2B supports time shift shooting. You will not be able to use time shift on the standard SC2 camera.stopCapture when interval shooting captureNumber is set to 0 (unlimited shots in interval shooting), the SC2 will not return the list of files when stopCapture is finished camera.listFiles SC2 will not show multiple thumbnails when maxThumbSize is set to 640. It will only return a single thumbnail. To get multiple thumbnails, get each thumbnail individually in a loop. You can also use GET to grab the thumbnail of each file as binary data by adding ?type=thumb to the URL camera.delete Prior to firmware 1.42, the SC2 could not delete more than one image or video file when specified as a list. It also didn\u2019t support the\u201call\u201d parameter to delete all files. camera._getMetadata does not return correct information. Workaround is to download the file to your mobile device and then extract the metadata locally after download. camera._getMySetting May not be returning correct results on the SC2. Note that the SC2 reverts to MySetting when the Wi-Fi connection is dropped or the camera is restarted or resumed from sleep. See the article below for more information. https://docs.google.com/document/d/e/2PACX-1vTPLBqVabuiic4uuSAy-h9PSCZOgtqY7mweDJnS5bXvpJuYwToVxlqpOtbGXfR279tN6nQRN7cqs2xX/pub Unsupported by SC2 and SC2B Unsupported API Explanation GET /plugin SC2 does not support plug-ins camera._convertVideoFormats SC2 has fixed parameters for video. Also, it appears that topBottomCorrection may be applied after the file is downloaded versus applying topBottomCorrection inside the camera. camera._cancelVideoConvert SC2 cannot perform video conversions camera._listAccessPoints SC2 does not support client mode connections and thus cannot connect to external Wi-Fi access points camera._setAccessPoint Set access point in client mode. SC2 only supports access point mode. camera._deleteAccessPoint SC2 does not support client mode Wi-Fi and thus cannot save external Wi-Fi access point information inside the camera. camera._listPlugins SC2 does not support plug-ins camera._setPlugins SC2 does not support plug-ins camera._pluginControl SC2 does not support plug-ins camera._getPluginLicense SC2 does not support plug-ins camera._getPluginOrders SC2 does not support plug-ins camera._setPluginOrders SC2 does not support plug-ins camera._deleteMySetting does not appear to delete all the settings on the SC2. Suggest you overwrite the settings in MySetting. Also, it appears that camera.reset may not reset all the SC2 settings in MySetting. See the article link in the camera._getMySetting section. aperture Only Z1 has an adjustable aperture _authentication SC2 does not support client mode and thus cannot disable digest authentication for client mode. _bluetoothPower Does not appear to work on the SC2, but you can turn on bluetooth manually with the button on the side of the camera. _compositeShootingOutputInterval Only Z1 support interval composite shooting _compositeShootingTime Only Z1 support interval composite shooting _HDMIreso No HDMI output on Z1. _imageStitching SC2 cannot control image stitching _language not supported on SC2. even on the Z1, it\u2019s not clear what impact this setting has. _microphone _microphoneChannel _networkType _password previewFormat width and height not working. SC2 only has one preview format and one fps. _shootingMethod for MySetting _topBottomCorrection videoStitching _visibilityReduction reduce size of tripod at bottom of image _username name for client mode digest authentication. SC2 does not support client mode Wi-Fi connections _wlanFrequency SC2 only supported 2.4GHz. Z1 supports 2.4GHz and 5GHz Unique SC2 APIs API Explanation cameraMode presets SC2 has unique presets for face mode, night view mode, lens-by-lens exposure. SC2B also has room mode Z1 Surprising Behavior API Explanation camera.reset offDelay is set to 64800 (18 hours) on reset. For the SC2, the offDelay is reset to 600 (10 minutes). Other Interesting API Findings Interval shooting SC2, minimum value is 8 V, minimum value is 4 Z1, minimum value is 6 for JPEG 10 for RAW+ mySetting THETA Z1 and SC2 can save shooting conditions set with a smartphone or the API. Shooting conditions registered in My Settings can be enabled by the end user by pressing and holding the Function (Fn) button on the THETA. The advantage is that you can save your shooting conditions and use them even while not connected to a smartphone. Both Z1 and SC2 mySetting settings survive reboot and sleep There is no My Settings icon on the SC2 (in fact, no OLED at all). Therefore, there is no way for the end user to change the settings without the mobile app. If you run camera.reset, the Z1 will give an error for the getMySetting command. This is expected behavior, since mySetting has no settings. However, using camera.reset with an SC2 will not reset the settings. Time For Camera to Be Ready The SC2 has a slower processor than the Z1. The Sc2 takes approximately 8,181 milliseconds to be ready for the next picture versus 2,922 milliseconds for the Z1. This is based on polling the camera status every 100ms. So, if you poll it more frequently, you will get more accurate results. The amount of time taken for the picture also varies with light conditions. If the image is darker, it will leave the shutter open longer. Testing the API with the Oppkey THETA ATK A free tester is available to help you test the RICOH THETA API. Get Oppkey THETA ATK Now","title":"SC2 Differences"},{"location":"differences/#ricoh-theta-development-community-tip-sheet","text":"early access outline Last updated: December 6, 2021 This is a community document based on contributions of informal test results from the theta360.guide independent community. This is not an official RICOH document. For official information, please contact RICOH. You should confirm these community tips with your own tests prior to deployment in a business setting. As these are unofficial tips, the official RICOH THETA API may change unexpectedly and these techniques could stop working.","title":"RICOH THETA Development Community Tip Sheet"},{"location":"differences/#limited-functionality-on-sc2-and-sc2b","text":"Limited API Explanation commands/status Only works with SC2 for takePicture. Cannot be used with startCapture. To see when the interval or bracket shooting is finished when using startCapture, use osc/state and look for _captureState of the SC2 camera.startCapture SC2 does not support interval composite shooting. Additionally, only the SC2B supports time shift shooting. You will not be able to use time shift on the standard SC2 camera.stopCapture when interval shooting captureNumber is set to 0 (unlimited shots in interval shooting), the SC2 will not return the list of files when stopCapture is finished camera.listFiles SC2 will not show multiple thumbnails when maxThumbSize is set to 640. It will only return a single thumbnail. To get multiple thumbnails, get each thumbnail individually in a loop. You can also use GET to grab the thumbnail of each file as binary data by adding ?type=thumb to the URL camera.delete Prior to firmware 1.42, the SC2 could not delete more than one image or video file when specified as a list. It also didn\u2019t support the\u201call\u201d parameter to delete all files. camera._getMetadata does not return correct information. Workaround is to download the file to your mobile device and then extract the metadata locally after download. camera._getMySetting May not be returning correct results on the SC2. Note that the SC2 reverts to MySetting when the Wi-Fi connection is dropped or the camera is restarted or resumed from sleep. See the article below for more information. https://docs.google.com/document/d/e/2PACX-1vTPLBqVabuiic4uuSAy-h9PSCZOgtqY7mweDJnS5bXvpJuYwToVxlqpOtbGXfR279tN6nQRN7cqs2xX/pub","title":"Limited Functionality on SC2 and SC2B"},{"location":"differences/#unsupported-by-sc2-and-sc2b","text":"Unsupported API Explanation GET /plugin SC2 does not support plug-ins camera._convertVideoFormats SC2 has fixed parameters for video. Also, it appears that topBottomCorrection may be applied after the file is downloaded versus applying topBottomCorrection inside the camera. camera._cancelVideoConvert SC2 cannot perform video conversions camera._listAccessPoints SC2 does not support client mode connections and thus cannot connect to external Wi-Fi access points camera._setAccessPoint Set access point in client mode. SC2 only supports access point mode. camera._deleteAccessPoint SC2 does not support client mode Wi-Fi and thus cannot save external Wi-Fi access point information inside the camera. camera._listPlugins SC2 does not support plug-ins camera._setPlugins SC2 does not support plug-ins camera._pluginControl SC2 does not support plug-ins camera._getPluginLicense SC2 does not support plug-ins camera._getPluginOrders SC2 does not support plug-ins camera._setPluginOrders SC2 does not support plug-ins camera._deleteMySetting does not appear to delete all the settings on the SC2. Suggest you overwrite the settings in MySetting. Also, it appears that camera.reset may not reset all the SC2 settings in MySetting. See the article link in the camera._getMySetting section. aperture Only Z1 has an adjustable aperture _authentication SC2 does not support client mode and thus cannot disable digest authentication for client mode. _bluetoothPower Does not appear to work on the SC2, but you can turn on bluetooth manually with the button on the side of the camera. _compositeShootingOutputInterval Only Z1 support interval composite shooting _compositeShootingTime Only Z1 support interval composite shooting _HDMIreso No HDMI output on Z1. _imageStitching SC2 cannot control image stitching _language not supported on SC2. even on the Z1, it\u2019s not clear what impact this setting has. _microphone _microphoneChannel _networkType _password previewFormat width and height not working. SC2 only has one preview format and one fps. _shootingMethod for MySetting _topBottomCorrection videoStitching _visibilityReduction reduce size of tripod at bottom of image _username name for client mode digest authentication. SC2 does not support client mode Wi-Fi connections _wlanFrequency SC2 only supported 2.4GHz. Z1 supports 2.4GHz and 5GHz","title":"Unsupported by SC2 and SC2B"},{"location":"differences/#unique-sc2-apis","text":"API Explanation cameraMode presets SC2 has unique presets for face mode, night view mode, lens-by-lens exposure. SC2B also has room mode","title":"Unique SC2 APIs"},{"location":"differences/#z1-surprising-behavior","text":"API Explanation camera.reset offDelay is set to 64800 (18 hours) on reset. For the SC2, the offDelay is reset to 600 (10 minutes).","title":"Z1 Surprising Behavior"},{"location":"differences/#other-interesting-api-findings","text":"","title":"Other Interesting API Findings"},{"location":"differences/#interval-shooting","text":"SC2, minimum value is 8 V, minimum value is 4 Z1, minimum value is 6 for JPEG 10 for RAW+","title":"Interval shooting"},{"location":"differences/#mysetting","text":"THETA Z1 and SC2 can save shooting conditions set with a smartphone or the API. Shooting conditions registered in My Settings can be enabled by the end user by pressing and holding the Function (Fn) button on the THETA. The advantage is that you can save your shooting conditions and use them even while not connected to a smartphone. Both Z1 and SC2 mySetting settings survive reboot and sleep There is no My Settings icon on the SC2 (in fact, no OLED at all). Therefore, there is no way for the end user to change the settings without the mobile app. If you run camera.reset, the Z1 will give an error for the getMySetting command. This is expected behavior, since mySetting has no settings. However, using camera.reset with an SC2 will not reset the settings.","title":"mySetting"},{"location":"differences/#time-for-camera-to-be-ready","text":"The SC2 has a slower processor than the Z1. The Sc2 takes approximately 8,181 milliseconds to be ready for the next picture versus 2,922 milliseconds for the Z1. This is based on polling the camera status every 100ms. So, if you poll it more frequently, you will get more accurate results. The amount of time taken for the picture also varies with light conditions. If the image is darker, it will leave the shutter open longer.","title":"Time For Camera to Be Ready"},{"location":"differences/#testing-the-api-with-the-oppkey-theta-atk","text":"A free tester is available to help you test the RICOH THETA API. Get Oppkey THETA ATK Now","title":"Testing the API with the Oppkey THETA ATK"},{"location":"list-files/","text":"Listing Files First, great job on taking a picture and downloading it to your computer with a GET command. Now, let's tackle a slightly more complex POST request with parameters in the payload. We'll list the files. Look at the API below and identify which parameters are optional and which are required. camera.listFiles Let's focus on the required parameters. I've underlined the \"required\" parameters in red. Structuring the Request In the example below, all the parameters to the left of the colon are enclosed in quotes. For example, use \"fileType\", not fileType. To the right of the colon, the numbers are not enclosed in quotes. Use 10 not \"10\". Getting the Response This is a collapsed view of the response. I only have 3 images on my THETA SC at the moment. Expanding an entry in the array, you can see the useful data you're getting back. NOTE: Thumbnails do not work on the SC2 listFiles command as of July 9, 2020. See this community discussion.","title":"List Files"},{"location":"list-files/#listing-files","text":"First, great job on taking a picture and downloading it to your computer with a GET command. Now, let's tackle a slightly more complex POST request with parameters in the payload. We'll list the files. Look at the API below and identify which parameters are optional and which are required. camera.listFiles Let's focus on the required parameters. I've underlined the \"required\" parameters in red.","title":"Listing Files"},{"location":"list-files/#structuring-the-request","text":"In the example below, all the parameters to the left of the colon are enclosed in quotes. For example, use \"fileType\", not fileType. To the right of the colon, the numbers are not enclosed in quotes. Use 10 not \"10\".","title":"Structuring the Request"},{"location":"list-files/#getting-the-response","text":"This is a collapsed view of the response. I only have 3 images on my THETA SC at the moment. Expanding an entry in the array, you can see the useful data you're getting back. NOTE: Thumbnails do not work on the SC2 listFiles command as of July 9, 2020. See this community discussion.","title":"Getting the Response"},{"location":"livepreview/","text":"LivePreview - MotionJPEG Live Stream There are many problems and workarounds using getLivePreview with the SC2. Refer to the problem section of this document. Using getLivePreview in mobile apps We know that getLivePreview from the SC2 does work. On the official RICOH mobile app, there is a live preview of the scene before a picture is taken. Unfortunately, getLivePreview does not work smoothly in the SDK. You can get through some of the problems by calling getLivePreview frequently. The stream on the SC2 does stop in the SDK, but you can restart with a new getLivePreview. getLivePreview in web-based applications getLivePreview also works with third-party applications. Amelia Viewer for RICOH THETA by Jake Kenin. GitHub repository . The stream worked without any problems. In Firefox, I'm using A-Frame to handle the navigation in a normal 360 view. Pre-compiled binaries for Windows 10 and Linux are here . I am using a stream of 1920x960 by 8 FPS. Binary data of live view (MotionJPEG). Binary data is transferred as Content-Type: multipart/x-mixed-replace. Main code example is here : Function for get live preview is here : A stripped down example of displaying the MotionJPEG stream is here . Another excellent source of information on MotionJPEG is this plug-in from the skunkworks club. Note that the THETA SC2 cannot use plug-in technology. However, other parts of the article are relevant.","title":"Livepreview Stream"},{"location":"livepreview/#livepreview-motionjpeg-live-stream","text":"There are many problems and workarounds using getLivePreview with the SC2. Refer to the problem section of this document.","title":"LivePreview - MotionJPEG Live Stream"},{"location":"livepreview/#using-getlivepreview-in-mobile-apps","text":"We know that getLivePreview from the SC2 does work. On the official RICOH mobile app, there is a live preview of the scene before a picture is taken. Unfortunately, getLivePreview does not work smoothly in the SDK. You can get through some of the problems by calling getLivePreview frequently. The stream on the SC2 does stop in the SDK, but you can restart with a new getLivePreview.","title":"Using getLivePreview in mobile apps"},{"location":"livepreview/#getlivepreview-in-web-based-applications","text":"getLivePreview also works with third-party applications. Amelia Viewer for RICOH THETA by Jake Kenin. GitHub repository . The stream worked without any problems. In Firefox, I'm using A-Frame to handle the navigation in a normal 360 view. Pre-compiled binaries for Windows 10 and Linux are here . I am using a stream of 1920x960 by 8 FPS. Binary data of live view (MotionJPEG). Binary data is transferred as Content-Type: multipart/x-mixed-replace. Main code example is here : Function for get live preview is here : A stripped down example of displaying the MotionJPEG stream is here . Another excellent source of information on MotionJPEG is this plug-in from the skunkworks club. Note that the THETA SC2 cannot use plug-in technology. However, other parts of the article are relevant.","title":"getLivePreview in web-based applications"},{"location":"metadata/","text":"Image Metadata At this stage, you may want to just download all the images and process all the images on the mobile device or in your cloud. You can grab the image metadata on your Android mobile phone with Android ExifInterface . Most developers grab all the images and process the data on the device. However, if there are hundreds or thousands of images on the camera, you may want to pull some data from images prior to processing. Problems with SC2 Unfortunately, _getMetadata does not work correctly on the SC2 as of July 10, 2020. You should Run the test yourself for each property you want to use to make sure that the camera is providing your app with the correct data. Request Response Community Tests exposure values with SC2 Key takeaways: The RICOH API for the SC2 has a few issues. The getMetadata call does not return the correct image exposure data. Correct exposure is saved to the file metadata and can be checked with ExifTool The RICOH API for the THETA V works fine. The getMetadata call returns the correct image exposure data Using a THETA SC2 (Firmware Version: 01.31), I adjusted the exposure to -0.3EV from the mobile app and took a picture. Ran getMetadata using the camera API. Code snippet is below. var url ='http://192.168.1.1/osc/commands/execute'; Map data = { 'name': 'camera.setOptions', 'parameters': { 'options': { \"exposureCompensation\": 2.0, } } }; The API returned an ExposureBialsValue of NULL . Also note that the Model and Software values are missing. Using ExifTool I was able to look at the metadata from the raw image file I found that the raw image contained the correct exposure metadata of -0.3. The takeaway is that the SC2 API has some issues. It does not return the correct image exposure metadata information. However, the correct metadata is stored in the image file. exposure values with THETA V Firmware Version: 3.30.1, getMetadata Initially, the ExposureBiasValue is set to zero. I adjusted the Exposure value to 1.3 from the official mobile app. I used the API to make sure that the value was consistent. Success! Using the API, I changed the ExposureBiasValue with the API to 2. I looked at the metadata with the API. ExposureBiasValue = 2. Success! exposure values with THETA Z1 I set the exposure compensation to 1.0 using the RICOH API sample code for this tutorial. After taking a picture I received the metadata using the RICOH API call getMetadata The exposure value was 1.0. Success!","title":"Image Metadata"},{"location":"metadata/#image-metadata","text":"At this stage, you may want to just download all the images and process all the images on the mobile device or in your cloud. You can grab the image metadata on your Android mobile phone with Android ExifInterface . Most developers grab all the images and process the data on the device. However, if there are hundreds or thousands of images on the camera, you may want to pull some data from images prior to processing.","title":"Image Metadata"},{"location":"metadata/#problems-with-sc2","text":"Unfortunately, _getMetadata does not work correctly on the SC2 as of July 10, 2020. You should Run the test yourself for each property you want to use to make sure that the camera is providing your app with the correct data. Request Response","title":"Problems with SC2"},{"location":"metadata/#community-tests","text":"","title":"Community Tests"},{"location":"metadata/#exposure-values-with-sc2","text":"Key takeaways: The RICOH API for the SC2 has a few issues. The getMetadata call does not return the correct image exposure data. Correct exposure is saved to the file metadata and can be checked with ExifTool The RICOH API for the THETA V works fine. The getMetadata call returns the correct image exposure data Using a THETA SC2 (Firmware Version: 01.31), I adjusted the exposure to -0.3EV from the mobile app and took a picture. Ran getMetadata using the camera API. Code snippet is below. var url ='http://192.168.1.1/osc/commands/execute'; Map data = { 'name': 'camera.setOptions', 'parameters': { 'options': { \"exposureCompensation\": 2.0, } } }; The API returned an ExposureBialsValue of NULL . Also note that the Model and Software values are missing. Using ExifTool I was able to look at the metadata from the raw image file I found that the raw image contained the correct exposure metadata of -0.3. The takeaway is that the SC2 API has some issues. It does not return the correct image exposure metadata information. However, the correct metadata is stored in the image file.","title":"exposure values with SC2"},{"location":"metadata/#exposure-values-with-theta-v","text":"Firmware Version: 3.30.1, getMetadata Initially, the ExposureBiasValue is set to zero. I adjusted the Exposure value to 1.3 from the official mobile app. I used the API to make sure that the value was consistent. Success! Using the API, I changed the ExposureBiasValue with the API to 2. I looked at the metadata with the API. ExposureBiasValue = 2. Success!","title":"exposure values with THETA V"},{"location":"metadata/#exposure-values-with-theta-z1","text":"I set the exposure compensation to 1.0 using the RICOH API sample code for this tutorial. After taking a picture I received the metadata using the RICOH API call getMetadata The exposure value was 1.0. Success!","title":"exposure values with THETA Z1"},{"location":"problems/","text":"SC2 Problem Quick Summary LivePreview Randomly Stops in SDK Problem Description : livePreview screen goes black in SC2. With the Android SDK, you get an EOFException in readMJpegFrame() in MJpegInputStream. Workaround : Submitted by tamy . Call camera.getLivePreview again after the error occurs. LivePreview Stops After Running a Command Problem Description : livePreview stops after certain commands. Workaround : Certain API commands appear to stop the live preview. If the screen is stopping, run camera.getLivePreview again. startCapture always shows inProgress Problem and solution reported by timbit123 . Problem Description : When using /osc/command/status with the id from startCapture , the state is always inProgress. Workaround : Use /osc/state and wait for _captureStatus to go back to idle . listFiles does not show thumbnails and freezes SC2 Problem reported by timbit123 . Problem Description : maxThumbSize: 640 does not show the thumbnails. The SC2 will freeze. There is no way to get the thumbnails. The listFiles command on the SC2 works differently than it does on the V and Z1. Workaround : As of August 11, 2020, we have thumbnails working with the SC2. You can get a base64 encoded thumbnail of approximately 7.3kB in size. Grab the URL of the file you want to get the thumbnail for and then specify it in _startFileUrl . Example in Dart map. Map data = { 'name': 'camera.listFiles', 'parameters': { 'fileType': 'image', 'entryCount': 5, 'maxThumbSize': 640, '_detail': true, '_startFileUrl': 'http://192.168.1.1/files/thetasc26c21a247d9055838792badc5/100RICOH/R0010129.JPG' } This is the response from a THETA SC2. 200 { \"name\": \"camera.listFiles\", \"results\": { \"entries\": [ { \"name\": \"R0010129.JPG\", \"fileUrl\": \"http://192.168.1.1/files/thetasc26c21a247d9055838792badc5/100RICOH/R0010129.JPG\", \"size\": 3943866, \"isProcessed\": true, \"previewUrl\": \"\", \"dateTimeZone\": \"2020:08:01 15:07:50-07:00\", \"width\": 5376, \"height\": 2688, \"_thumbSize\": 7349, \"thumbnail\": \"/9j/2wCEAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigkJyctMkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEUBDA0NEQ8RIRISIUUuJy5FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRf/EAaIAAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKCxAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo ... Code sample is available that saves thumbnails to local storage to help with testing. camera._getMetadata not working as expected Problem Description : Properties such as ExposureBiasValue are incorrect. Workaround : The correct metadata appears to be in the image file. Pull the actual image to your mobile phone and then use a library to extract the metadata in the image on your mobile phone. Do not use camera._getMetadata to pull the information if you suspect it is not providing you with the correct values. previewFormat width and height not working Problem Description : with getOptions, the previewFormat does not show correct values. width and height return 0. Workaround : There is no known workaround to set the width and height, but getLivePreview does appear to work. The preview format of the SC2 is fixed at 1024x512 at 30fps. Unlike the V and the Z1, the preview format cannot be changed to different fps and frame size. Examples of how to extract the JPEG frames from the MotionJPEG stream are available. If your mobile app checks the camera model, you can figure out what the size of the frames are on the SC2 without needing to use previewFormat. For SC2, the size is always 1024x512. camera.delete does not delete multiple images from camera Problem Description : camera.delete only deletes one image. The array of URLs and special parameters such as \"all\" and \"image\" do not work. Workaround : Use listFiles to get the list of images and then delete each file individually in a loop or map.","title":"SC2 API Problems"},{"location":"problems/#sc2-problem-quick-summary","text":"","title":"SC2 Problem Quick Summary"},{"location":"problems/#livepreview-randomly-stops-in-sdk","text":"Problem Description : livePreview screen goes black in SC2. With the Android SDK, you get an EOFException in readMJpegFrame() in MJpegInputStream. Workaround : Submitted by tamy . Call camera.getLivePreview again after the error occurs.","title":"LivePreview Randomly Stops in SDK"},{"location":"problems/#livepreview-stops-after-running-a-command","text":"Problem Description : livePreview stops after certain commands. Workaround : Certain API commands appear to stop the live preview. If the screen is stopping, run camera.getLivePreview again.","title":"LivePreview Stops After Running a Command"},{"location":"problems/#startcapture-always-shows-inprogress","text":"Problem and solution reported by timbit123 . Problem Description : When using /osc/command/status with the id from startCapture , the state is always inProgress. Workaround : Use /osc/state and wait for _captureStatus to go back to idle .","title":"startCapture always shows inProgress"},{"location":"problems/#listfiles-does-not-show-thumbnails-and-freezes-sc2","text":"Problem reported by timbit123 . Problem Description : maxThumbSize: 640 does not show the thumbnails. The SC2 will freeze. There is no way to get the thumbnails. The listFiles command on the SC2 works differently than it does on the V and Z1. Workaround : As of August 11, 2020, we have thumbnails working with the SC2. You can get a base64 encoded thumbnail of approximately 7.3kB in size. Grab the URL of the file you want to get the thumbnail for and then specify it in _startFileUrl . Example in Dart map. Map data = { 'name': 'camera.listFiles', 'parameters': { 'fileType': 'image', 'entryCount': 5, 'maxThumbSize': 640, '_detail': true, '_startFileUrl': 'http://192.168.1.1/files/thetasc26c21a247d9055838792badc5/100RICOH/R0010129.JPG' } This is the response from a THETA SC2. 200 { \"name\": \"camera.listFiles\", \"results\": { \"entries\": [ { \"name\": \"R0010129.JPG\", \"fileUrl\": \"http://192.168.1.1/files/thetasc26c21a247d9055838792badc5/100RICOH/R0010129.JPG\", \"size\": 3943866, \"isProcessed\": true, \"previewUrl\": \"\", \"dateTimeZone\": \"2020:08:01 15:07:50-07:00\", \"width\": 5376, \"height\": 2688, \"_thumbSize\": 7349, \"thumbnail\": \"/9j/2wCEAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigkJyctMkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEUBDA0NEQ8RIRISIUUuJy5FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRf/EAaIAAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKCxAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo ... Code sample is available that saves thumbnails to local storage to help with testing.","title":"listFiles does not show thumbnails and freezes SC2"},{"location":"problems/#camera_getmetadata-not-working-as-expected","text":"Problem Description : Properties such as ExposureBiasValue are incorrect. Workaround : The correct metadata appears to be in the image file. Pull the actual image to your mobile phone and then use a library to extract the metadata in the image on your mobile phone. Do not use camera._getMetadata to pull the information if you suspect it is not providing you with the correct values.","title":"camera._getMetadata not working as expected"},{"location":"problems/#previewformat-width-and-height-not-working","text":"Problem Description : with getOptions, the previewFormat does not show correct values. width and height return 0. Workaround : There is no known workaround to set the width and height, but getLivePreview does appear to work. The preview format of the SC2 is fixed at 1024x512 at 30fps. Unlike the V and the Z1, the preview format cannot be changed to different fps and frame size. Examples of how to extract the JPEG frames from the MotionJPEG stream are available. If your mobile app checks the camera model, you can figure out what the size of the frames are on the SC2 without needing to use previewFormat. For SC2, the size is always 1024x512.","title":"previewFormat width and height not working"},{"location":"problems/#cameradelete-does-not-delete-multiple-images-from-camera","text":"Problem Description : camera.delete only deletes one image. The array of URLs and special parameters such as \"all\" and \"image\" do not work. Workaround : Use listFiles to get the list of images and then delete each file individually in a loop or map.","title":"camera.delete does not delete multiple images from camera"},{"location":"save-image/","text":"Save Image Here's an example of getting the _latestFileUrl from /osc/state and writing the bytes with the Dart File.writeAsBytes method. Most languages such as Java, Python, JavaScript have libraries to save a file stream from a URL to permanent local storage. In Python, it is just a few lines. When you make the GET request, your HTTP library may require you to specify that the response is a stream. When you save the THETA image, you may need a loop to save the file as a set of blocks. An example for Python is below. Saving a file from an HTTP stream is a common operation with most languages, so just search for examples on Google or StackOverflow for your specific programming language.","title":"Save Image"},{"location":"save-image/#save-image","text":"Here's an example of getting the _latestFileUrl from /osc/state and writing the bytes with the Dart File.writeAsBytes method. Most languages such as Java, Python, JavaScript have libraries to save a file stream from a URL to permanent local storage. In Python, it is just a few lines. When you make the GET request, your HTTP library may require you to specify that the response is a stream. When you save the THETA image, you may need a loop to save the file as a set of blocks. An example for Python is below. Saving a file from an HTTP stream is a common operation with most languages, so just search for examples on Google or StackOverflow for your specific programming language.","title":"Save Image"}]}